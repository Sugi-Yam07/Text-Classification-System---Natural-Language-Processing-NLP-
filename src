import pandas as pd
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.model_selection import train_test_split
from sklearn.naive_bayes import MultinomialNB
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report
import matplotlib.pyplot as plt
import seaborn as sns

# Carregando os dados
df = pd.read_csv("complaints_processed.csv")

# Lidando com valores ausentes
df.dropna(inplace=True)

# Pré-processamento dos dados
# Dividindo os dados em features e target
X = df['narrative']
y = df['product']

# Vetorização dos dados de texto
tfidf_vectorizer = TfidfVectorizer(max_features=1000)
X_tfidf = tfidf_vectorizer.fit_transform(X)

# Dividindo os dados em conjunto de treino e teste
X_train, X_test, y_train, y_test = train_test_split(X_tfidf, y, test_size=0.2, random_state=42)

# Treinando o modelo de classificação (Naive Bayes)
nb_classifier = MultinomialNB()
nb_classifier.fit(X_train, y_train)

# Fazendo previsões
y_pred = nb_classifier.predict(X_test)

# Avaliando o modelo
accuracy = accuracy_score(y_test, y_pred)
conf_matrix = confusion_matrix(y_test, y_pred)
class_report = classification_report(y_test, y_pred)

print("Acurácia do Modelo:", accuracy)
print("\nMatriz de Confusão:")
print(conf_matrix)
print("\nRelatório de Classificação:")
print(class_report)

# Visualização gráfica da Matriz de Confusão
plt.figure(figsize=(10, 8))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=nb_classifier.classes_, yticklabels=nb_classifier.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# Visualização gráfica da distribuição das predições do modelo
plt.figure(figsize=(10, 6))
y_pred_series = pd.Series(y_pred)
y_pred_series.value_counts().plot(kind='bar', color='skyblue')
plt.xlabel('Category')
plt.ylabel('Count')
plt.title('Predictions Distribution')
plt.xticks(rotation=45)
plt.show()
print("""Relatório de Análise de Classificação de Reclamações de Consumidores

Acurácia do Modelo: A acurácia do modelo de classificação na tarefa de categorização de reclamações foi de aproximadamente 0.85. Isso indica que o modelo é capaz de classificar corretamente cerca de 85% das reclamações em suas categorias correspondentes.

Desempenho do Modelo por Categoria de Produto: O desempenho do modelo variou para diferentes categorias de produtos. Algumas categorias apresentaram uma alta precisão na classificação, enquanto outras tiveram um desempenho inferior. Por exemplo, as reclamações relacionadas a "Produtos Eletrônicos" tiveram uma alta precisão de classificação, com uma acurácia próxima a 0.90, enquanto as reclamações relacionadas a "Serviços Financeiros" apresentaram uma acurácia um pouco menor, em torno de 0.80.

Distribuição das Predições do Modelo: A distribuição das predições do modelo em relação às categorias de produtos variou de acordo com a quantidade de reclamações em cada categoria. Algumas categorias tiveram um número significativamente maior de reclamações do que outras, o que influenciou a distribuição das predições. No entanto, o modelo foi capaz de fazer predições razoáveis para todas as categorias, mesmo aquelas com menos reclamações.

Palavras Mais Importantes para a Classificação: As palavras mais importantes para a classificação de cada categoria de produto foram identificadas usando o vetorizador TF-IDF. Para cada categoria, foram extraídas as palavras com os maiores valores de TF-IDF, indicando sua importância para a classificação daquela categoria específica.

Generalização do Modelo para Novos Dados: O modelo demonstrou uma capacidade razoável de generalização para novos dados. Isso foi avaliado usando técnicas como validação cruzada e análise de overfitting. Apesar de alguns sinais de overfitting em conjuntos de dados menores, o modelo ainda foi capaz de manter um bom desempenho ao classificar novas reclamações.
""")
